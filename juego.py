import streamlit as st
import random
import re

def generar_numero_secreto():
    """Genera un n√∫mero secreto aleatorio de 4 d√≠gitos."""
    return str(random.randint(1000, 9999))

def comparar_numero(usuario, secreto):
    """Compara el n√∫mero del usuario con el n√∫mero secreto y genera las pistas."""
    pista = [""] * len(usuario)  # Inicializamos la lista con valores vac√≠os para cada d√≠gito del n√∫mero
    usado_secreto = [False] * len(secreto)  # Para marcar qu√© d√≠gitos ya han sido usados en el n√∫mero secreto
    usuario_usado = [False] * len(usuario)  # Para marcar qu√© d√≠gitos del intento del usuario ya han sido verificados

    # Primero, se marca con verde los d√≠gitos en la posici√≥n correcta
    for i, digito in enumerate(usuario):
        if digito == secreto[i]:
            pista[i] = f"<span style='color:green'>{digito}</span>"  # N√∫mero en la posici√≥n correcta (verde)
            usado_secreto[i] = True  # Marcamos el d√≠gito como usado
            usuario_usado[i] = True  # Marcamos el d√≠gito como verificado

    # Luego, se marca con amarillo los n√∫meros que est√°n en la secuencia pero en la posici√≥n incorrecta
    for i, digito in enumerate(usuario):
        if digito != secreto[i] and digito in secreto:
            # Asegurarse de que el d√≠gito no se haya marcado como usado anteriormente
            for j in range(len(secreto)):
                if digito == secreto[j] and not usado_secreto[j] and not usuario_usado[i]:
                    pista[i] = f"<span style='color:yellow'>{digito}</span>"  # N√∫mero en la secuencia pero en lugar incorrecto (amarillo)
                    usado_secreto[j] = True  # Marcamos ese d√≠gito como usado
                    usuario_usado[i] = True  # Marcamos el d√≠gito del usuario como verificado
                    break

    # Finalmente, los n√∫meros que no est√°n en la secuencia no se colorean (gris)
    for i, digito in enumerate(usuario):
        if pista[i] == "":  # Si no se ha asignado color, significa que el d√≠gito no est√° ni en el lugar correcto ni en la secuencia
            pista[i] = f"<span style='color:gray'>{digito}</span>"  # N√∫mero no est√° en la secuencia (gris)

    return "".join(pista)

def app():
    st.title("üî¢ Adivina el N√∫mero Secreto con Regex üî¢")

    # Instrucciones del juego
    st.write("""
    **Instrucciones:**
    1. Se te dar√° un n√∫mero secreto de 4 d√≠gitos que debes adivinar.
    2. Cada vez que intentes, el juego te dar√° pistas sobre el n√∫mero.
    3. Verde indica que el n√∫mero est√° en la posici√≥n correcta, amarillo indica que el n√∫mero est√° en la secuencia pero no en la posici√≥n correcta, y gris indica que el n√∫mero no est√° en la secuencia.
    4. Si el n√∫mero que introduces es correcto, ganar√°s el juego.
    5. Puedes volver a jugar despues de haber ganado dandole al boton "Jugar de nuevo".
    
    ¬°Buena suerte!
    """)

    # Inicializar el juego
    if 'intentos' not in st.session_state:
        st.session_state.intentos = 0
        st.session_state.numero_secreto = generar_numero_secreto()
        st.session_state.adivinada = False

    # Solicitar el patr√≥n regex
    regex = st.text_input("Escribe una expresi√≥n regular para adivinar el n√∫mero secreto:")

    # Bot√≥n para comprobar el regex
    if st.button("Comprobar Regex"):
        st.session_state.intentos += 1

        # Verificar que el intento sea exactamente un n√∫mero de 4 d√≠gitos
        if len(regex) != 4 or not regex.isdigit():
            st.error("¬°Debes ingresar un n√∫mero de 4 d√≠gitos!")
        else:
            # Verificar si el n√∫mero ingresado es correcto
            if regex == st.session_state.numero_secreto:
                st.success(f"üéâ ¬°Correcto! El n√∫mero secreto es {st.session_state.numero_secreto}.")
                st.session_state.adivinada = True
            else:
                st.warning(f"No es correcto. Intenta con otro patr√≥n. Intentos: {st.session_state.intentos}")

                # Comparar el intento con el n√∫mero secreto y mostrar pistas interactivas
                pistas = comparar_numero(regex, st.session_state.numero_secreto)
                st.markdown(f"**Pistas:** {pistas}", unsafe_allow_html=True)

    # Mostrar el n√∫mero de intentos
    st.write(f"Intentos realizados: {st.session_state.intentos}")

    # Si adivin√≥ el n√∫mero, permitir reiniciar el juego
    if st.session_state.adivinada:
        if st.button("Jugar de nuevo"):
            # Restablecer las variables de estado para iniciar un nuevo juego
            st.session_state.intentos = 0
            st.session_state.numero_secreto = generar_numero_secreto()
            st.session_state.adivinada = False
            # No es necesario hacer rerun; solo se reinicia el estado del juego.

    # Cr√©ditos
    st.write("---")
    st.write("Programado por **Kevin Guio**")

if __name__ == "__main__":
    app()
